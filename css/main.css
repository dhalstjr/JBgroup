@charset 'utf-8';

/* 반응형할 때 유용한 기능들 */
/* aspect-ratio 가로세로 비율을 맞출 때 사용되고, 특히 이미지나 비디오에 사용된다. */

/* header 영역부터 실시 */
#header {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  /* bottom까지 0으로 설정하면 뷰포트 전체가 fixed가 된다. */
  /* 어떤 이유때문인가 했더니 fixed는 뷰포트를 기준으로 고정을 시키는 CSS이다. -> 스크롤 해도 항상 그 자리에 고정. */
  /* bottom까지 0으로 설정한다면, top부터 bottom까지 모두 고정이 되기 때문에 결과적으로 세로 높이가 전체 뷰포트 높이 전체가 된다. */
  /* top만 0으로 설정하면 뷰포트 위에서부터 고정되고, 좌우도 0으로 설정해 고정되어있기 때문에 자식 높이까지만 높이를 가지는  */
  /* top을 제거하고 bottom만 0으로 설정하면 뷰포트 맨 아래에서 부터 고정이 된다. */

  z-index: 999;

  background: #f5f;

  color: #fff;
}

#header .site-header {
  position: relative;

  /* 높이를 주고 grid를 이용해여 align-items : center를 주면 중앙 정렬이 되기 때문에 grid를 사용한 것으로 보인다. */
  /* 굳이 site-header라는 html구조를 더 기입해서 grid을 이용해서 중앙정렬을 실시한 이유는 -> 정렬 계층을 나누어서 레이아웃을 더 유연하게 만드려는 전략으로 보인다. */
  /* 전체 구조용 grid , 내부 정렬용 flex */
  height: 9.8rem;
  align-items: center;
  display: grid;
}

.header-container {
  padding: 0 6.4rem;
}

#header .header-content {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

#header .header-content .logo-box {
  width: 16rem;
  height: 2.6rem;
}

#header .header-content .logo-box .logo {
  display: block;
  width: 100%;
  height: 100%;

  background: url(../img/brand-logo.png) no-repeat 0 0 / contain;
}

#header .header-content #nav .gnb {
  display: flex;
  align-items: center;
  justify-content: space-between;

  text-align: center;
}

#header .header-content #nav .gnb > li {
  position: relative;

  /* li에게 패딩을 주기 -> 보니까 서브메뉴의 디자인때문에 주는 것 같음*/
  padding: 0 1rem;
}

#header .header-content #nav .gnb > li > a {
  /* 크기 주기 */
  display: block;
  font-size: 1.8rem;
  line-height: 1.4;
  font-weight: 800;

  /* 크기를 주고 가운데 정렬 */
  display: flex;
  align-items: center;
  justify-content: center;

  /* px값을 vw으로 변환하려면 px값에 100울 곱하고 화면 너비를 나누면 된다.  */
  /* 500px화면에서 100px을 vw로 변환하려면 , 100px * 100 / 500px를 계산하면 된다. 결과 값은 20vw */

  /* 최소 높이 설정하는 명령이지만 clamp의 기능의 설명 */
  /* 반응형 웹디자인에서 사용되는 기법으로, clamp(min, preferred , max) 함수는 저 세가지 값을 기준으로 반응형 크기 범위를 제한하는 함수이다. */
  /* 처음은 최소값 , 두번째는 기준값 또는 선호값 , 세번째는 최대값으로 설정된다. */
  /* 이 코드를 해석하자면 9.6vw(뷰포트)너비에 따라 min-width가 유동적으로 바뀌지만, 8.89rem(최소값)보다 작아지지 않고, 16rem(최대값)보다 커지지 않도록 제한해줘. 라는 코드이다.  */
  /* 기준값을 설정하고, 그에 맞게 유동적으로 설정하기 위해서 이를 사용한다. */
  /* 미디어쿼리없이 반응형 디자인을 사용하기 위해서 사용, min(), max() 함수와 같은 반응형 디자인 CSS이다. */
  /* 주의할 점은 다른 단위를 사용하는 경우에만 사용 가능하다고 한다.( ex) min(20rem ,10vh) ) */
  /* vw(뷰포트 너비) -> 1vw는 화면 너비의 1%에 해덩합니다. 만약 뷰포트 1000px이면 100px이 10vw이다. */
  min-width: clamp(8.89rem, 9.6vw, 16rem);
  height: 9.8rem;
}

/* 유틸메뉴 */
#header .header-content .utils {
  display: flex;
  align-items: center;
  gap: 2.8rem;
}

#header .header-content .utils .family-btn {
  display: flex;
  align-items: center;
  justify-content: center;

  width: 7.8rem;
  height: 2.8rem;

  border-radius: 1.4rem;
  background: rgba(255, 255, 255, 0.15);

  font-weight: 800;
  font-size: 1.6rem;
  color: #fff;

  transition: background 150ms ease-in-out;
}

#header .header-content .utils .family-btn:hover {
  background: #00134a;
}

#header .header-content .utils .langs {
  display: flex;
  align-items: center;
  gap: 1rem;

  color: #fff;
  font-size: 1.4rem;
  font-weight: 800;
}

/* 구분선 */
#header .header-content .utils .langs .split {
  width: 1px;
  height: 14px;

  background: #fff;
  opacity: 0.3;
}

/* 유틸메뉴의 탭메뉴 아이콘 -> background가 아닌 크기를 줘서 만든 것 같음 */
#header .header-content .utils .site-tab {
  font-size: 0;
}

/* a태그에 가상요소를 추가헤서 크기와 높이를 주어 선처럼 만들기 */
#header .header-content .utils .site-tab .tab-menu {
  display: flex;
  align-items: center;
  justify-content: center;

  /* 사이트 탭메뉴가 들어갈 공간 */
  width: 2.2rem;
  height: 2.2rem;

  /* 텍스트를 화면 밖으로 보내서 안보이게 하려고 */
  text-indent: -999rem;
  overflow: hidden;

  position: relative;

  /* align-center가 안맞음. 혹시 몰라서 font-size : 0을 설정했지만, 틀어지는 건 아직 같음. */
  font-size: 0;
}

#header .header-content .utils .site-tab .tab-menu:before {
  content: "";
  display: block;
  width: 2.2rem;
  height: 0.2rem;
  background-color: #fff;

  /* 정중앙을 정렬하고 margin-top을 이용하여 조정. margin-top값이 없으면 서로 같은 위치에 겹쳐있음. -> 그러니 정중앙 정렬을 건들지 않고 margin-top을 서로 사용해 위치를 맞춤 */
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);

  /* align 센터에 맞추기 위해서 margin-top을 before와 after를 같이 줌. 반대로 */
  margin-top: -3px;

  transition: margin 300ms ease-in-out, transform 300ms ease-in-out;
}

#header .header-content .utils .site-tab .tab-menu:after {
  content: "";
  display: block;
  width: 2.2rem;
  height: 0.2rem;
  background-color: #fff;

  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);

  /* align 센터에 맞추기 위해서 margin-top을 before와 after를 같이 줌. 반대로 */
  margin-top: 3px;

  transition: margin 300ms ease-in-out, transform 300ms ease-in-out;
}

/* header : end */

/* main : start -> section1  */
#main {
  /* 100vh까지 사용한 이유는 브라우저 지원 떄문에 */
  min-height: 100vh;
  /* 100svh -> svh(small viewport height)란 최신 CSS 단위 중 하나로, 모바일에서의 "화면 높이 문제"를 해결하기 위해 등장한 기능이다. */
  /* 실제 콘텐츠를 가릴 수 있는 브라우저 UI(주소창, 툴바 등)를 고려한 최소 높이를 기준으로 하는 단위이다. */
  /* svh를 사용한 이유는 100vh에 있음 -> 100vh는 주소창을 포함한 높이. -> 모바일 브라우저(예 : Safari, Chrome 모바일)는 화면 상단에 주소창/탭 바 등 UI가 자동 숨김/등장한다. 그런데 100vh는 그 UI까지 포함한 높이로 계산합니다. */
  /* 결과, 주소창이 나타나면 콘텐츠가 짤리거나 스크롤 오류가 발생할 수 있다. */
  /* 그러하여 100svh를 사용하는 이유는 주소창이 보이는 상태에서도 콘텐츠가 짤리지 않기 위함이고,  */
  /* 특히 모바일 웹 앱 ,풀스크린 섹션, 히어로 영역(비주얼)에 많이 사용된다. */
  /* 모바일 UX 최적화에 매우 중요한 최신 CSS입니다. */
  min-height: 100svh;

  background: #55f;
}
/* main : end -> section1  */

#main #main-section {
  position: relative;
  z-index: 10;

  min-width: 100vh;
  min-height: 100lvh;
}

/* 비주얼 영역 화면 -> 비디오를 구할 수 없어 background로 설정 */
#main .visual {
  position: relative;
}

#main .visual .visual-bg {
  position: absolute;
  /* 위에서부터 시작 */
  top: 0;
  left: 0;
  right: 0;

  display: block;

  width: 100%;
  /* 100lvh는 large viewport height -> 주소창, 툴 바등이 보이는 전체 높이*/
  /* 내부 섹션에 100lvh를 사용한 이유는 회면이 최대로 높을 때 기준으로 디자인을 꽉 차게 유지하기 위해서.  */
  /* 반대로 전체 섹션의 100svh를 준 이유는 짤리는 것을 방지하기 위해서임. */
  /* 그래서 이 둘을 같이 사용하면 모바일 대응이 훨씬 안정적임. */
  /* 주소창이 사라져도 비주얼 영역이 꽉 차게 하기 위해서임. */
  height: 100lvh;
  background: url(../img/main-visual-bg.png) no-repeat 0 0 / cover;
  object-fit: cover;
}

#main .main-section-inner {
  /* 이게 부모 기준이 되어줘야 main-container가 보인다. */
  position: relative;
}

/*  */
#main .main-section-inner .main-container {
  /* padding: 0 17.8rem; */

  /* 최대 넓이 설정. */
  max-width: 156.4rem;

  margin: 0 auto;
  width: 100%;
  background: #f55;
  box-sizing: border-box;
}

#main .main-section-inner .main-container .grid-area {
  display: grid;

  grid-template-columns: 1fr 50%;

  gap: min(2.2vw, 64px);

  justify-content: space-between;

  /* header 높이를 padding을 줘 높이를 맞췀 */
  padding: 9.8rem 0;

  color: #fff;
}

/* grid 왼쪽 부분 */
#main .main-section-inner .main-container .grid-area .grid-left {
  display: grid;
  align-items: center;

  width: 100%;
  /* 애한테 크기를 줌 -> 본페이지에서는 calc로 중간을 맞춘 것 같음 */
  position: sticky;
  /* sticky를 주고 top은 고정되는 시점을 말하는 것 같다. */
  top: 0;

  /* height : calc(100svh와 상하 패딩을 준 것을 넣어 가운데 정렬) -> 나는 상하 패딩 9.8rem으로 줬으니 그걸 뺴야함*/
  height: 100svh;
  height: calc(100svh - 9.8rem - 9.8rem);
}

#main
  .main-section-inner
  .main-container
  .grid-area
  .grid-left
  .grid-left-container {
  display: flex;

  flex-direction: column;
  gap: 6.4rem;
  max-width: 34.9rem;
}

#main .main-section-inner .main-container .grid-area .grid-left .title {
  font-size: 8.8rem;
  font-weight: 800;
  color: #fff;

  /* 글 간격, 높이 맞추기 */
  letter-spacing: -0.02em;
  line-height: 1.1;

  word-break: keep-all;

  /* 첫문자를 대문자로 변환 */
  text-transform: capitalize;
}

#main
  .main-section-inner
  .main-container
  .grid-area
  .grid-left
  .video-container {
  display: flex;
  align-items: center;
  justify-content: space-between;

  max-width: 32rem;

  gap: 1.6rem;
}

#main
  .main-section-inner
  .main-container
  .grid-area
  .grid-left
  .video-container
  .progress {
  display: block;
  width: 100%;
  height: 8px;

  border-radius: 0.4rem;

  background: rgba(255, 255, 255, 0.2);
}

/* 영상 길이만큼 채워지는 효과 바 */
#main
  .main-section-inner
  .main-container
  .grid-area
  .grid-left
  .video-container
  .progress
  .bar {
  display: block;
  width: 50%;
  height: 8px;

  border-radius: 0.4rem;

  background: rgba(255, 255, 255, 1);
}

#main
  .main-section-inner
  .main-container
  .grid-area
  .grid-left
  .video-container
  .toggle-play-btn {
  box-sizing: border-box;

  display: flex;
  align-items: center;
  justify-content: center;
  width: 4.2rem;
  height: 3.4rem;

  background: url(../img/toggle-btn-play.svg) no-repeat 0 0 / contain;
}

/* grid 오른쪽 부분 */
#main .main-section-inner .main-container .grid-area .grid-right {
  display: flex;
  align-items: center;
}

#main .main-section-inner .main-container .grid-area .grid-right .widgets {
  display: grid;

  /* 1fr 50%와 완전히 다른 것임  */
  /* 1fr 1fr은 남은 공간을 1 : 1 비율로 나눈다는 것, 전체 너비가 만약에 1000px 이라면 500px씩 나눠갖는 것이고, */
  /* 1fr 50%은 첫번째 열은 남는 공간 중 일부를 차지하고, 두번째 열은 항상 전체 너비의 50%를 고정으로 갖게 됨. */
  /* 그러니까 50%로 설정하면 두번째 열은 무조건 50%를 차지해야함, 1fr로 설정하면 앞에 1fr이 아닌 1.51351156fr 이런식으로 자신보다 큰 수가 들어오면 차지하는 비율이 줄어든다. */
  grid-template-columns: 1fr 1fr;

  gap: 1.6rem;

  margin-left: auto;

  /* 최대 크기 설정 */
  max-width: 66.4rem;
}

#main .main-section-inner .main-container .grid-area .grid-right .widgets .col {
  /*  grid 설정으로 생긴 열을 grid로 설정하여 gap을 설정 */
  display: grid;

  gap: 1.6rem;
}

/* 위젯 크기 */
/* 첫 위젯 */
#main .widget {
  display: flex;
  flex-direction: column;

  border-radius: 4.4rem;
  padding: 2.8rem;

  background: rgba(0, 19, 74, 0.48);
}

#main
  .main-section-inner
  .main-container
  .grid-area
  .grid-right
  .widgets
  .widget
  .widget-title {
  font-size: 1.8rem;
  font-weight: 900;
  color: #fff;
  line-height: 1;
  letter-spacing: -0.02em;

  margin-bottom: 2.4rem;

  display: flex;
  align-items: center;

  gap: 0.6rem;
}

#main
  .main-section-inner
  .main-container
  .grid-area
  .grid-right
  .widgets
  .widget
  .widget-title:before {
  content: "";
  display: block;

  width: 1rem;
  height: 1rem;

  background: #fff;
  border-radius: 0.6rem;
}

#main
  .main-section-inner
  .main-container
  .grid-area
  .grid-right
  .widgets
  .widget
  .valuation {
  font-size: 0;
  line-height: 1.4rem;
  text-align: center;
}

#main
  .main-section-inner
  .main-container
  .grid-area
  .grid-right
  .widgets
  .widget
  .valuation
  > ul {
  display: flex;
  justify-content: space-between;
  gap: 0.8rem;
}

#main
  .main-section-inner
  .main-container
  .grid-area
  .grid-right
  .widgets
  .widget
  .valuation
  > ul
  > li {
  display: flex;
  flex-direction: column;
  align-items: center;

  /* 크기를 줘서 이미지에 줬던 margin이 틀어지지 않게 해봄 */
  /* 본페이지에는 flex : 1를 줘서 사용함 -> 크기를 주는 것과 다른 점은 flex : 1은 남는 공간을 다른 형제들과 1 : 1 비율로 나눠가지겠다는 의미이다. 예를 들어 3개의 li가 있으면 33.333%의 비율로 나눠가지겠다는 의미가 돤다.*/
  /* flex : 1은 반응형을 구현할 때 좋다. 최소 크기를 주어 맞추게 된다면, 크기가 줄어들었을 때 틀어질 수도 있다. 그러니 미디어쿼리를 이용해 크기를 다시 조절해줘야한다. */
  /* flex를 사용하면 미디어쿼리를 사용하지 않고, 비율을 유지하는 데 가능하다는 것이다.  */
  /* flex 말고 다양한 방법이 많다. 너무 flex의 의존하지 말자. ul에 grid를 줘서 사용할 수 있다.  */
  /* 본페이지와는 달라서 flex : 1만 주면 텍스트가 틀어지기 때문에 최소 크기를 주고 , flex : 1를 사용하겠다.  */
  flex: 1;
  min-width: 10.6rem;
}

/* img의 크기를 정해주고 비율을 맞춘다. */
#main
  .main-section-inner
  .main-container
  .grid-area
  .grid-right
  .widgets
  .widget
  .valuation
  > ul
  > li
  > img {
  display: block;
  width: 8.2rem;

  /* aspect-ratio 속성은 주로 반응형 웹페이지에서 화면 비율을 유지하면서 컨텐츠를 렌더링할 때 사용된다. 특히 비디오나 이미지와 같이 가로세로 비율이 고정되어야하는 요소들을 사용할 떄 유용 */
  /* aspect-ratio 1 / 1 는 가로세로 비율을 1:1 즉, 정사각형을 의미한다. -> 1/1로 설정한다면 정사각형으로 설정하는 것이다.  */
  aspect-ratio: 1 / 1;

  background: rgba(255, 255, 255, 0.2);
  border: 1px solid rgba(255, 255, 255, 0.3);
  border-radius: 4rem;

  /* margin 0 auto 다음에 나오는 것은 밑에 부분에 margin을 주는 것이다. */
  margin: 0 auto 1rem;
}

#main
  .main-section-inner
  .main-container
  .grid-area
  .grid-right
  .widgets
  .widget
  .valuation
  > ul
  > li
  > span {
  display: block;
  font-weight: 800;
  font-size: 1.6rem;

  letter-spacing: -0.04em;
}

/* 두번째 위젯 */

#main .widgets .ir-calender .presentation > ul {
  display: flex;
  flex-direction: column;
}

#main .widgets .ir-calender .presentation > ul > li {
  padding: 1.4rem 0;

  border-bottom: 1px solid rgba(255, 255, 255, 0.25);
}

/* li 처음 요소 위 패딩 사라지게 */
#main .widgets .ir-calender .presentation > ul > li:first-of-type {
  padding: 0 0 1.4rem 0;
}

/* li 마지막 border 사리지게 */
#main .widgets .ir-calender .presentation > ul > li:last-of-type {
  border-bottom: none;
}

#main .widgets .ir-calender .presentation > ul > li > a {
  display: block;
  width: 100%;
  height: 100%;

  font-weight: 700;
  color: #fff;

  letter-spacing: -0.04em;
  word-break: keep-all;
}

#main .widgets .ir-calender .presentation > ul > li > a > h4 {
  font-size: 1.7rem;
  line-height: 1.4;
  margin-bottom: 0.6rem;
}

#main .widgets .ir-calender .presentation > ul > li > a > span {
  display: block;
  color: rgba(255, 255, 255, 0.6);
  font-size: 1.4rem;
}

/* 세번쨰 위젯 */

#main .widgets .report .report-content {
  display: flex;
  flex-direction: column;
}

#main .widgets .report .report-content .report-name {
  font-size: 2.4rem;
  font-weight: 700;
  word-break: keep-all;

  letter-spacing: -0.04em;
  line-height: 1.4;

  padding: 0 0 1.2rem 0;

  border-bottom: 1px solid rgba(255, 255, 255, 0.25);
}

#main .widgets .report .report-content .move-btn {
  margin-top: 1.2rem;
}

#main .widgets .report .report-content .move-btn a {
  width: 3.6rem;
  height: 3.6rem;
  background: rgba(255, 255, 255, 0.2);

  border-radius: 50%;

  display: flex;
  align-items: center;
  justify-content: center;

  transition: background 250ms ease-in-out;
}

#main .widgets .report .report-content .move-btn a:hover {
  background: rgba(255, 255, 255, 1);
}

#main .widgets .report .report-content .move-btn a:before {
  content: "";

  display: block;
  width: 1.4rem;
  height: 1.4rem;

  background: url(../img/widget-arrow.svg) no-repeat 0 0 / contain;

  transition: background 250ms ease-in-out;
}

#main .widgets .report .report-content .move-btn a:hover:before {
  background: url(../img/widget-arrow-hover.svg) no-repeat 0 0 / contain;
}

/* 네번째 위젯 */

#main .result {
  background: rgba(25, 228, 238, 0.4);
}
#main .result .result-content {
}

#main .result .result-content .result-name {
  font-size: 2.4rem;
  font-weight: 700;
  word-break: keep-all;

  letter-spacing: -0.04em;
  line-height: 1.4;

  padding: 0 0 1.2rem 0;

  border-bottom: 1px solid rgba(255, 255, 255, 0.25);
}

#main .result .result-list {
  display: flex;
  flex-direction: column;

  gap: 1.6rem;
  margin-top: 1.2rem;
}

#main .result .result-list > li {
}

#main .result .result-list > li > a {
  display: flex;
  align-items: center;
  justify-content: space-between;

  color: #fff;
}

#main .result .result-list > li > a > h4 {
  font-size: 1.7rem;
  font-weight: 700;

  letter-spacing: -0.04em;
}

#main .result .result-list > li > a > .download-btn {
  display: block;
  display: flex;
  align-items: center;
  justify-content: center;

  width: 3.6rem;
  height: 3.6rem;

  background: rgba(255, 255, 255, 0.2);
  border-radius: 50%;

  transition: background 250ms ease-in-out;
}

#main .result .result-list > li > a > .download-btn:hover {
  background: #fff;
}

#main .result .result-list > li > a > .download-btn:before {
  content: "";
  display: block;
  width: 1.2rem;
  height: 1.6rem;

  background: url(../img/download-btn.svg) no-repeat 0 0 / contain;

  transition: background 250ms ease-in-out;
}

#main .result .result-list > li > a > .download-btn:hover:before {
  background: url(../img/download-btn-hover.svg) no-repeat 0 0 / contain;
}

/* 다섯번쨰 위젯 */

#main .stock-info {
  background: rgba(255, 255, 255, 0.75);
  color: #333;
}

#main
  .main-section-inner
  .main-container
  .grid-area
  .grid-right
  .widgets
  .stock-info
  .widget-title:before {
  background: #0a31a8;
}

#main
  .main-section-inner
  .main-container
  .grid-area
  .grid-right
  .widgets
  .stock-info
  .widget-title {
  color: #333;
}

#main .stock-info .stock-info-content {
}

#main .stock-info .stock-info-content .jb {
}

#main .stock-info .stock-info-content .jb .jb-title {
  font-size: 1.4rem;
  font-weight: 700;

  letter-spacing: -0.02em;

  margin-bottom: 1rem;
}

#main .stock-info .stock-info-content .jb .jb-money-content {
  display: flex;
  flex-direction: column;

  gap: 1.6rem;

  padding-bottom: 2.8rem;

  border-bottom: 1px solid rgba(0, 0, 0, 0.15);
}

#main .stock-info .stock-info-content .jb .jb-money-content .jb-money {
  margin-left: auto;
  vertical-align: baseline;
}

#main .stock-info .stock-info-content .jb .jb-money-content .jb-money span {
  display: inline-block;
  font-size: 2rem;
  font-weight: 700;

  transform: translateY(126%);
}

#main .stock-info .jb .jb-money-content .jb-money strong {
  display: inline-block;
  font-size: 4.8rem;
  font-weight: 800;
  letter-spacing: -0.04em;

  margin-right: 0.6rem;
}

#main .stock-info .stock-info-content .jb .jb-money-content .jb-money-quote {
  margin-left: auto;
}

#main
  .stock-info
  .stock-info-content
  .jb
  .jb-money-content
  .jb-money-quote
  span {
  display: inline-block;

  font-size: 1.4rem;
  font-weight: 500;

  margin-right: 0.6rem;
}

#main
  .stock-info
  .stock-info-content
  .jb
  .jb-money-content
  .jb-money-quote
  strong {
  color: #f00;

  font-size: 1.4rem;
  font-weight: 500;
}

#main .kos-container {
  display: flex;
  flex-direction: column;

  margin-top: 2.8rem;

  gap: 1.6rem;
}

#main .kos-container .kospi .kospi-content,
#main .kos-container .kosdaq .kosdaq-content {
  display: flex;
  justify-content: space-between;
}

#main .kos-container .title {
  font-size: 1.4rem;
  font-weight: 500;

  letter-spacing: -0.02em;
}

#main .kos-container .krx {
  margin-left: auto;

  text-align: right;
  display: flex;
  flex-direction: column;
  gap: 0.6rem;
}
#main .kos-container .krx .krx-num {
  font-size: 1.4rem;
  font-weight: 500;
  letter-spacing: -0.06em;
}

#main .kos-container .krx .krx-change {
  font-size: 1.4rem;
  font-weight: 500;
  letter-spacing: -0.04em;
  color: #1850ff;
}
